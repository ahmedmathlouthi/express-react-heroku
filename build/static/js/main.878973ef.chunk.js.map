{"version":3,"sources":["helpers/numberOfItems.ts","redux/helpers.ts","redux/actions/userActions.ts","components/header/LinkMenu.tsx","components/header/Nav.tsx","data/sampleProducts.ts","redux/actions/productActions.ts","helpers/priceFormat.ts","components/main/shop/AddForm.tsx","components/main/shop/ProductCard.tsx","components/main/shop/Shop.tsx","helpers/getCartItems.ts","components/main/cart/CartItems.tsx","components/main/cart/Cart.tsx","components/main/auth/Login.tsx","redux/actions/postActions.ts","components/main/post/PostCard.tsx","components/main/post/PostList.tsx","components/main/post/PostDetails.tsx","components/main/post/AddForm.tsx","App.tsx","redux/modules/user.ts","redux/modules/products.ts","redux/modules/posts.ts","redux/index.ts","api/api.ts","redux/sagas/Posts.ts","redux/sagas/Auth.ts","index.tsx"],"names":["numberOfItems","state","products","cart","reduce","acc","el","quantity","typedAction","type","payload","logoutAction","localStorage","removeItem","mapDispatchToProps","logout","to","LinkMenu","connect","username","user","Menu","position","Item","name","Dropdown","item","text","onClick","Nav","Header","as","sampleProducts","id","price","img","requestProducts","priceFormat","toFixed","addToCart","product","AddForm","useState","setQuantity","added","setAdded","Message","color","Form","Field","Input","label","value","onChange","e","Math","max","Number","target","fluid","Button","preventDefault","Icon","ProductCard","Card","Image","src","wrapped","ui","Content","Description","extra","Shop","dispatch","bindActionCreators","useEffect","length","Container","Group","map","getCartItems","associatedProduct","find","push","getTotalPrice","createSelector","cartItems","CartItems","totalPrice","handleToken","token","a","c","axios","post","response","data","status","console","log","divided","cartItem","key","size","Meta","className","stripeKey","t","billingAddress","shippingAddress","amount","Cart","loginRequest","Login","setUsername","password","setPassword","getPostsRequest","getPostsAction","posts","PostCard","Embed","active","url","video_id","split","ampersandPosition","indexOf","substring","getId","source","title","body","pathname","PostList","openAdd","setOpenAdd","PostDetails","props","match","params","getPosts","filter","x","useSelector","p","addPostRequest","AddPostForm","newPost","video","setState","event","persist","currentTarget","prev","Segment","compact","Radio","toggle","checked","authenticatedPage","Component","componentName","displayName","this","getItem","renderPage","React","path","exact","component","initialState","error","loading","rootReducer","combineReducers","action","baseUrl","config","headers","Authorization","loginApi","addPostApi","getPostsApi","get","getPostsSaga","addPostSaga","getPostDetailSaga","postsSaga","call","put","all","takeEvery","takeLatest","loginUser","loginSaga","setItem","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.878973ef.chunk.js","sourcesContent":["import { RootState } from \"../redux\";\n\nexport const numberOfItems = (state: RootState) => {\n  return state.products.cart.reduce((acc, el) => acc + el.quantity, 0);\n};\n","export function typedAction<T extends string>(type: T): { type: T };\nexport function typedAction<T extends string, P extends any>(\n  type: T,\n  payload: P\n): { type: T; payload: P };\nexport function typedAction(type: string, payload?: any) {\n  return { type, payload };\n}\n","import { typedAction } from \"../helpers\";\n\nexport const loginAction = (user: UserState) => {\n    return typedAction(\"user/LOGIN_SUCESS\", user);\n};\nexport const loginErrorAction = (error: string) => {\n    return typedAction(\"user/LOGIN_ERROR\", error);\n}\nexport const logoutAction = () => {\n    localStorage.removeItem(\"token\");\n    return typedAction(\"user/LOGOUT\");\n};\nexport const loginRequest = (user: UserState) => {\n    return typedAction(\"user/LOGIN_REQUEST\", user);\n};","import React from \"react\";\nimport { Menu, Dropdown } from \"semantic-ui-react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { RootState } from \"../../redux\";\nimport { numberOfItems } from \"../../helpers/numberOfItems\";\nimport { connect } from \"react-redux\";\nimport { logoutAction } from \"../../redux/actions/userActions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  username: state.user.username,\n  numberOfItems: numberOfItems(state)\n});\n\nconst mapDispatchToProps = { logoutAction };\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\nconst logout = () => {\n  logoutAction();\n  return <Redirect to=\"/login\" />\n}\nconst UnconnectedLinkMenu: React.FC<Props> = ({\n  logoutAction,\n  numberOfItems,\n  username\n}) => {\n  return (\n    <Menu>\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"postList\">\n          <Link to=\"/postList\">PostList </Link>\n        </Menu.Item>\n        <Menu.Item name=\"shop\">\n          <Link to=\"/shop\">Shop</Link>\n        </Menu.Item>\n        <Menu.Item name=\"cart\">\n          <Link to=\"/cart\">Cart ({numberOfItems})</Link>\n        </Menu.Item>\n        {username === null ? (\n          <Menu.Item name=\"login\">\n            <Link to=\"/login\">Login</Link>\n          </Menu.Item>\n        ) : (\n          <Dropdown item text={username}>\n            <Dropdown.Menu>\n              <Dropdown.Item onClick={logout}>Logout</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        )}\n      </Menu.Menu>\n    </Menu>\n  );\n};\n\nexport const LinkMenu = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedLinkMenu);\n","import React from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport { LinkMenu } from \"./LinkMenu\";\n\nexport const Nav: React.FC = () => {\n  return (\n    <>\n      <Header as=\"h1\">My Blog</Header>\n      <LinkMenu />\n    </>\n  );\n};\n","export const sampleProducts: Product[] = [\n  {\n    id: 1,\n    name: \"Cool Headphones\",\n    price: 4999,\n    img: \"https://placeimg.com/640/480/tech/5\"\n  },\n  {\n    id: 2,\n    name: \"Various Parts\",\n    price: 1800,\n    img: \"https://placeimg.com/640/480/tech/10\"\n  },\n  {\n    id: 3,\n    name: \"Skateboard\",\n    price: 2999,\n    img: \"https://placeimg.com/640/480/animals/3\"\n  }\n];\n","import { typedAction } from \"../helpers\";\nimport { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\nimport { RootState } from \"..\";\nimport { sampleProducts } from \"../../data/sampleProducts\";\n\nexport const setProducts = (products: Product[]) => {\n    return typedAction(\"products/SET_PRODUCTS\", products);\n};\nexport const requestProducts = () => {\n    return typedAction(\"products/SET_PRODUCTS_REQUEST\");\n}\nexport const setProductsFailure = () => {\n    return typedAction(\"products/SET_PRODUCTS_FAILURE\");\n};\n\nexport const addToCart = (product: Product, quantity: number) => {\n    return typedAction(\"products/ADD_TO_CART\", { product, quantity });\n};\n\nexport const loadProducts = () => {\n    return (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n        setTimeout(() => {\n            dispatch(\n                setProducts([...getState().products.products, ...sampleProducts])\n            );\n        }, 500);\n    };\n};","export const priceFormat = (price: number) => {\n  return `$${(price / 100).toFixed(2)}`;\n};\n","import React, { useState } from \"react\";\nimport { Form, Input, Button, Icon, Message } from \"semantic-ui-react\";\nimport { addToCart } from \"../../../redux/actions/productActions\";\nimport { connect } from \"react-redux\";\n\nconst mapDispatchToProps = { addToCart };\n\ntype OwnProps = {\n  product: Product;\n};\n\ntype Props = typeof mapDispatchToProps & OwnProps;\n\nconst UnconnectedAddForm: React.FC<Props> = ({ addToCart, product }) => {\n  const [quantity, setQuantity] = useState(1);\n  const [added, setAdded] = useState(false);\n\n  const add = (e: React.MouseEvent) => {\n    e.preventDefault();\n    addToCart(product, quantity);\n    setAdded(true);\n  };\n\n  return added ? (\n    <Message color=\"green\">\n      Added{\" \"}\n      <strong>\n        {quantity} {product.name}\n      </strong>{\" \"}\n      to your cart!\n    </Message>\n  ) : (\n    <Form>\n      <Form.Field>\n        <Input\n          type=\"number\"\n          label=\"Quantity\"\n          value={quantity}\n          onChange={e => setQuantity(Math.max(Number(e.target.value), 1))}\n          fluid\n        />\n      </Form.Field>\n      <Button onClick={add}>\n        <Icon name=\"plus cart\" />\n        Add to cart\n      </Button>\n    </Form>\n  );\n};\n\nexport const AddForm = connect(null, mapDispatchToProps)(UnconnectedAddForm);\n","import React from \"react\";\nimport { Card, Image } from \"semantic-ui-react\";\nimport { priceFormat } from \"../../../helpers/priceFormat\";\nimport { AddForm } from \"./AddForm\";\n\ntype Props = {\n  product: Product;\n};\n\nexport const ProductCard: React.FC<Props> = ({ product }) => {\n  return (\n    <Card>\n      <Image src={product.img} wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>{product.name}</Card.Header>\n        <Card.Description>{priceFormat(product.price)}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <AddForm product={product} />\n      </Card.Content>\n    </Card>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Container, Header, Card } from \"semantic-ui-react\";\nimport { RootState } from \"../../../redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { requestProducts } from \"../../../redux/actions/productActions\";\nimport { connect } from \"react-redux\";\nimport { ProductCard } from \"./ProductCard\";\n\nconst mapStateToProps = (state: RootState) => ({\n  products: state.products.products\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      requestProducts\n    },\n    dispatch\n  );\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst UnconnectedShop: React.FC<Props> = ({ requestProducts, products }) => {\n  useEffect(() => {\n    if (products.length === 0) {\n      requestProducts();\n    }\n  }, [requestProducts, products]);\n\n  return (\n    <Container>\n      <Header as=\"h2\">Shop</Header>\n      <Card.Group>\n        {products.map(product => (\n          <ProductCard product={product} />\n        ))}\n      </Card.Group>\n    </Container>\n  );\n};\n\nexport const Shop = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedShop);\n","import { RootState } from \"../redux\";\nimport { createSelector } from \"reselect\";\n\ntype CheckoutItem = CartItem & Product;\n\nexport const getCartItems = (state: RootState): CheckoutItem[] => {\n  return state.products.cart.reduce((acc, el) => {\n    const associatedProduct = state.products.products.find(\n      product => product.id === el.id\n    ) as Product;\n    acc.push({ ...el, ...associatedProduct });\n    return acc;\n  }, [] as CheckoutItem[]);\n};\n\nexport const getTotalPrice = createSelector(getCartItems, cartItems => {\n  return cartItems.reduce((acc, el) => acc + el.price * el.quantity, 0);\n});\n","import React from \"react\";\nimport { RootState } from \"../../../redux\";\nimport { getCartItems, getTotalPrice } from \"../../../helpers/getCartItems\";\nimport { connect } from \"react-redux\";\nimport { Item, Header } from \"semantic-ui-react\";\nimport { priceFormat } from \"../../../helpers/priceFormat\";\nimport StripeCheckout, { Token }  from \"react-stripe-checkout\";\nimport axios  from \"axios\";\n\nconst mapStateToProps = (state: RootState) => ({\n  cartItems: getCartItems(state),\n  totalPrice: getTotalPrice(state)\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst UnconnectedCartItems: React.FC<Props> = ({ cartItems, totalPrice }) => {\n  \n  const handleToken = async (token: Token, id: number) => { \n    const product = cartItems\n      .find(c => c.id === id);\n    const response = await axios.post('http://localhost:4000/api/checkout'\n    , {token, product});\n    const { status } = response.data;\n    if(status === 'success'){\n      console.log('check email')\n    }else { console.log('error')}\n  }\n  return (\n    <>\n      <Item.Group divided>\n        {cartItems.map(cartItem => (\n          <Item key={cartItem.id}>\n            <Item.Image size=\"tiny\" src={cartItem.img} />\n            <Item.Content>\n              <Item.Header>{cartItem.name}</Item.Header>\n              <Item.Meta>\n                <span className=\"price\">{priceFormat(cartItem.price)}</span>\n              </Item.Meta>\n              <Item.Description>Quantity: {cartItem.quantity}</Item.Description>\n              <StripeCheckout \n                stripeKey = \"pk_test_b9WxNMjvj5p8SZLdxWmBGOjw00NJkBNjCv\"\n                token = {t => handleToken(t, cartItem.id)}\n                billingAddress\n                shippingAddress\n                amount = {cartItem.price}\n                name = {cartItem.name}\n              />\n            </Item.Content>\n          </Item>\n          \n        ))}\n      </Item.Group>\n      <Header as=\"h3\">Total Price: {priceFormat(totalPrice)}</Header>\n     \n    </>\n  );\n};\n\nexport const CartItems = connect(mapStateToProps)(UnconnectedCartItems);\n","import React from \"react\";\nimport { Container, Header } from \"semantic-ui-react\";\nimport { CartItems } from \"./CartItems\";\n\nexport const Cart: React.FC = () => {\n  return (\n    <Container>\n      <Header as=\"h2\">Cart</Header>\n      <CartItems />\n    </Container>\n  );\n};\n","import React, { useState } from \"react\";\nimport { RootState } from \"../../../redux\";\nimport { loginAction, loginRequest } from \"../../../redux/actions/userActions\";\nimport { connect } from \"react-redux\";\nimport { Form, Input, Header, Button, Container } from \"semantic-ui-react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst mapStateToProps = (state: RootState) => ({\n  user: state.user\n});\n\nconst mapDispatchToProps = { loginRequest };\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nconst UnconnectedLogin: React.FC<Props> = ({ loginRequest, user }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  user.username = username;\n  user.password = password;\n  const tryLogin = (e: React.MouseEvent) => {\n    e.preventDefault();\n    loginRequest(user);\n  };\n\n  // if (user !== null) {\n  //   return <Redirect to=\"/shop\" />;\n  // }\n\n  return (\n    <Container>\n      <Header as=\"h2\">Login</Header>\n      <Form>\n        <Form.Field>\n          <Input\n            label=\"Username\"\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n          />\n          <Input \n          type = \"password\"\n          label=\"Password\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n          />\n        </Form.Field>\n        <Button onClick={tryLogin}>Login</Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport const Login = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedLogin);\n","import { typedAction } from \"../helpers\";\n\n\nexport const getPostsRequest = () => {\n    return typedAction(\"posts/GET_POSTS_REQUEST\");\n}  \nexport const addPostAction = (post: Post) => {\n    return typedAction(\"posts/ADD_POST\", post);\n};\nexport const getPostsAction = (posts: Post[]) => {\n      return typedAction(\"posts/GET_POSTS\", posts);\n};\nexport const getPostsFailure = () => {\n    return typedAction(\"posts/GET_POSTS_ERROR\");\n};\nexport const addPostFailure = (error: string) => {\n    return typedAction(\"posts/ADD_POST_ERROR\", error);\n};\nexport const addPostRequest = (post: Post) => {\n    return typedAction(\"posts/ADD_POST_REQUEST\", post);\n}\nexport const getPostDetails = (id: string) => {\n    return typedAction(\"posts/GET_POST_DETAILS\", id);\n}\nexport const getPostDetailsRequest = (id: string) => {\n    return typedAction(\"posts/GET_POST_DETAILS_REQUEST\", id);\n}\nexport const getPostDetailsFailure = (error: string) => {\n    return typedAction(\"posts/GET_POST_DETAILS_ERROR\", error);\n};\n","import React from \"react\";\nimport { Card, Image, Button, Embed } from \"semantic-ui-react\";\nimport { AddPostForm } from \"./AddForm\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { PostDetails } from \"./PostDetails\";\n\ntype Props = {\n  post: Post;\n};\n\n\nexport const PostCard: React.FC<Props> = ({ post }) => {\n\n  const getId = (url: string) => {\n      var video_id = url.split('v=')[1];\n      var ampersandPosition = video_id.indexOf('&');\n      if(ampersandPosition != -1) {\n       return video_id = video_id.substring(0, ampersandPosition);\n    }\n  }\n  \n  return (\n    <Card>\n      { post.type == \"video\" && \n        <Embed \n        active = {true}\n        id = {getId(post.url)}\n        source = \"youtube\"\n        />\n      \n      }\n      <Card.Content>\n        <Card.Header>{post.title}</Card.Header>\n        {post.type == \"text\" && <Card.Description>{post.body}</Card.Description> }\n      </Card.Content>\n     \n      <Card.Content extra>\n      <Button> \n        <Link to={{\n          pathname:`/${post.id}`,\n          state: {post}\n          }} >\n        Details  \n        </Link>\n      </Button>  \n      {/* <PostDetails post={post} /> */}\n     \n        {/* <AddPostForm post={post} /> */}\n      </Card.Content>\n    </Card>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Header, Card, Button, Icon } from \"semantic-ui-react\";\nimport { RootState } from \"../../../redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { getPostsAction, getPostsRequest } from \"../../../redux/actions/postActions\";\nimport { connect } from \"react-redux\";\nimport { PostCard } from \"./PostCard\";\nimport { AddPostForm } from \"./AddForm\";\nimport { Redirect } from \"react-router-dom\";\n\nconst mapStateToProps = (state: RootState) => ({\n  posts: state.posts.posts\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      getPostsRequest\n    },\n    dispatch\n);\n\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst UnconnectedPostList: React.FC<Props> = ({ getPostsRequest, posts }) => {\n  \n  const [openAdd, setOpenAdd] = useState(false);\n  useEffect(() => {\n    if (posts.length == 0) {\n      getPostsRequest();\n    }\n  }, [getPostsRequest, posts]);\n  if(openAdd) {\n    return <Redirect to=\"/addPost\" />\n  }\n  return (\n    <Container>\n      <Button onClick ={e => setOpenAdd(true)}>\n        <Icon name=\"plus\" />\n        Add Post\n      </Button>\n      <Header as=\"h2\">Posts</Header>\n      <Card.Group>\n        {posts.map(post => (\n          <PostCard\n          key= {post.id}\n          post={post} \n          />\n        ))}\n      </Card.Group>\n    </Container>\n  );\n};\n\nexport const PostList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedPostList);\n","import React, { useEffect } from \"react\";\nimport { Card, Image, Button, Container, Embed } from \"semantic-ui-react\";\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\nimport { RootState } from \"../../../redux\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\n\ninterface DetailProps extends RouteComponentProps<{ id: string }> {\n    // other properties\n}\n\n\nexport const PostDetails: React.FC<DetailProps> = (props) => {\n    const getId = (url: string) => {\n        var video_id = url.split('v=')[1];\n        var ampersandPosition = video_id.indexOf('&');\n        if(ampersandPosition != -1) {\n         return video_id = video_id.substring(0, ampersandPosition);\n      }\n    }\n    const id = props.match.params.id;\n\n    const postsSelectors = (state: RootState) => state.posts.posts;\n    const getPosts = createSelector(\n        postsSelectors,\n        (posts) => posts.filter(x => { return x.id == id })\n    );\n    const Item = useSelector(getPosts);\n\n    return (\n        <Container>\n            Details:\n            {Item.map(p => (\n                <Container>\n                    <h2>{p.title}</h2>\n                    {/* <h3>{x.body}</h3> */}\n                    {p.type == \"video\" &&\n                        <Embed\n                            active={true}\n                            id={getId(p.url)}\n                            source=\"youtube\"\n                        />\n\n                    }\n                </Container>\n\n            ))}\n        </Container>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Form, Input, Button, Icon, Message, Segment, Radio } from \"semantic-ui-react\";\nimport { addPostRequest } from \"../../../redux/actions/postActions\";\nimport { connect } from \"react-redux\";\n\nconst mapDispatchToProps = { addPostRequest };\n\ntype Props = typeof mapDispatchToProps  ;\n\nconst UnconnectedAddForm: React.FC<Props> = ({ addPostRequest }) => {\n  let newPost: Post = {\n    id: '',\n    url: '',\n    type: '',\n    body: '',\n    title: '',\n  } ; \n  \n  const [state, setState] = useState({\n    video: false,\n    title: '',\n    url: '',\n    body: '',\n  })\n  const [added, setAdded] = useState(false);\n  const { video, title, url, body } = state\n  \n  const onChange = (event: React.FormEvent<HTMLInputElement>): void =>  {\n    event.persist();\n    const {value, name, className } = event.currentTarget\n    if (className.indexOf('checkbox') != -1) {\n      setState(prev => ({ ...prev, video: !prev.video }))\n    } else {\n      setState(prev => ({ ...prev, [name]: value }))\n    }\n\n  }\n  \n  const addPost = (e: React.MouseEvent) => {\n    e.preventDefault();\n    newPost.title = title;\n    newPost.body = body;\n    newPost.url = url;\n    video ? newPost.type = \"video\" : newPost.type = \"text\";\n    addPostRequest(newPost);\n    setAdded(true);\n  };\n\n  return added ? (\n    <Message color=\"green\">\n      Post Added !\n    </Message>\n  ) : (\n      <Form>\n        <Form.Field>\n          {/* <Form.Field> */}\n            <Segment compact>\n              <Radio toggle\n                label='Video type'\n                name='video'\n                checked={video}\n                onChange={onChange}\n              />\n            </Segment>\n          {/* </Form.Field> */}\n          <Input\n            type=\"text\"\n            name= \"title\"\n            label=\"Title\"\n            value={title}\n            onChange={onChange}\n            fluid\n          />\n          {video ?\n            <Input\n              type=\"text\"\n              name = \"url\"\n              label=\"Video Url\"\n              value={url}\n              onChange={onChange}\n              fluid\n            /> :\n            <Input\n              type=\"text\"\n              name =\"body\"\n              label=\"Text content\"\n              value={body}\n              onChange={onChange}\n              fluid\n            />\n          }\n        </Form.Field>\n        <Button onClick={addPost}>\n          <Icon name=\"plus\" />\n        Add Post\n      </Button>\n      </Form>\n    );\n};\n\nexport const AddPostForm = connect(null, mapDispatchToProps)(UnconnectedAddForm);\n","import React, { Component } from \"react\";\nimport { Nav } from \"./components/header/Nav\";\nimport { Container } from \"semantic-ui-react\";\nimport { Switch, Route, Redirect, RouteProps, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Shop } from \"./components/main/shop/Shop\";\nimport { Cart } from \"./components/main/cart/Cart\";\nimport { Login } from \"./components/main/auth/Login\";\nimport { PostList } from \"./components/main/post/PostList\";\nimport { RootState } from \"./redux\";\nimport { connect } from \"react-redux\";\nimport { PostDetails } from \"./components/main/post/PostDetails\";\nimport { AddPostForm } from \"./components/main/post/AddForm\";\n\n\n// const mapStateToProps = (state: RootState) => ({\n//   token: state.user.token\n// });\n\n// type ownProps = ReturnType<typeof mapStateToProps>  ;\nexport function authenticatedPage (Component: React.FC, ) {\n  const componentName = Component.displayName || Component.name || 'Component'\n\n  return class extends React.Component {\n    static displayName = `Route(${componentName})`\n\n    renderPage () {\n      return (\n        <Component {...this.props} />\n      )\n    }\n\n    render () {\n      const token = localStorage.getItem('token');\n      if (token) {\n        return this.renderPage()\n      } else {\n        return <Redirect to='/login' />\n      }\n    }\n  }\n}\n\nconst App: React.FC= ({}) => {\n  return (\n    <Container>\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact>\n          Home\n        </Route>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/postList\" component={PostList} />\n        <Route path=\"/shop\" component={Shop} />\n        <Route path=\"/cart\" component={Cart} />\n        <Route exact path='/addPost' component={authenticatedPage(AddPostForm)} />\n        <Route path=\"/:id\" component={PostDetails} />\n      </Switch>\n    </Container>\n  );\n};\n\n\n\n\n\nexport default connect()(App);\n","import { loginAction, logoutAction, loginErrorAction } from \"../actions/userActions\";\n\nconst initialState: UserState = { \n  username: \"\",\n  password: \"\",\n  token: localStorage.getItem(\"token\"), \n  error: null\n};\n\n\n\ntype UserAction = ReturnType<\n            typeof loginAction \n            | typeof logoutAction\n            | typeof loginErrorAction>;\n\nexport function userReducer(\n  state = initialState,\n  action: UserAction\n): UserState {\n  switch (action.type) {\n    case \"user/LOGIN_SUCESS\":\n      return { ...state, token: action.payload.token};\n    case \"user/LOGIN_ERROR\":\n      return { ...state, error: action.payload};\n    case \"user/LOGOUT\":\n      return { ...state};\n    default:\n      return state;\n  }\n}\n","import { setProducts, addToCart, requestProducts } from \"../actions/productActions\";\nimport { sampleProducts } from \"../../data/sampleProducts\";\n\nconst initialState: ProductState = { products: [...sampleProducts], loading: false, cart: [] };\n\n\n\ntype ProductAction = ReturnType<\n      typeof requestProducts\n      | typeof setProducts \n      | typeof addToCart>;\n\nexport function productsReducer(\n  state = initialState,\n  action: ProductAction\n): ProductState {\n  switch (action.type) {\n    case \"products/SET_PRODUCTS_REQUEST\":\n      return {...state, loading: true};\n    case \"products/SET_PRODUCTS\":\n      return { ...state, products: action.payload, loading: false};\n    case \"products/ADD_TO_CART\":\n      return {\n        ...state,\n        cart: [\n          ...state.cart,\n          {\n            id: action.payload.product.id,\n            quantity: action.payload.quantity\n          }\n        ], \n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n","import { typedAction } from \"../helpers\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { RootState } from \"..\";\nimport { sampleProducts } from \"../../data/sampleProducts\";\nimport { getPostDetails,getPostsAction, addPostAction, getPostsFailure, addPostFailure, getPostsRequest } from \"../actions/postActions\";\n\nconst initialState: PostState = { posts: [], loading: false };\n\n\n\n// export const loadPosts = () => {\n//   return (dispatch: Dispatch<AnyAction>, getState: () => RootState) => {\n//     setTimeout(() => {\n//       response = await getPosts;\n//       dispatch(\n//         getPostsRequest([...getState().posts]), response])\n//       );\n//     }, 500);\n//   };\n// };\n\ntype PostAction = ReturnType<\n        typeof getPostDetails\n        | typeof getPostsRequest\n        | typeof getPostsAction \n        | typeof addPostAction \n        | typeof getPostsFailure  \n        |  typeof addPostFailure>;\n\nexport function postsReducer(\n  state = initialState,\n  action: PostAction\n): PostState {\n  switch (action.type) {\n    case \"posts/GET_POST_DETAILS\":\n      return { ...state, posts: state.posts.filter(x=> x.id == action.payload)}\n    case \"posts/GET_POSTS\":\n      return { ...state, posts: action.payload, loading: true };\n    case \"posts/ADD_POST\":\n      return {\n        ...state,\n        posts: [\n          ...state.posts,\n          {\n            ...action.payload\n          }\n        ],\n        loading: false\n      };\n    case \"posts/GET_POSTS_ERROR\":\n      return {...state, loading: false};\n    case \"posts/ADD_POST_ERROR\":\n      return {...state, loading: false};\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { userReducer } from \"./modules/user\";\nimport { productsReducer } from \"./modules/products\";\nimport { postsReducer } from \"./modules/posts\";\n\nexport const rootReducer = combineReducers({\n  user: userReducer,\n  products: productsReducer,\n  posts: postsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import axios from 'axios';\n\nconst baseUrl = 'http://localhost:4000/api';\n\nconst token = localStorage.getItem(\"token\");\nconst config = {\n  headers: { Authorization: `Bearer ${token}` }\n};\n\nexport const loginApi = (user: UserState): Promise<any> => {\n  return axios.post(`${baseUrl}/user/login`, user);\n}\n\nexport const addPostApi = (post: Post): Promise<any> => {\n  return axios.post(`${baseUrl}/post/add`, post, config );\n}\n\nexport const getPostsApi = (): Promise<Post[]> => {\n  return axios.get(`${baseUrl}/post/all`, config);\n}\n\nexport const getPostDetailsApi = (id: string): Promise<Post> => {\n  return axios.get(`${baseUrl}/post/:id`, config);\n}","import { call, put, takeEvery, all, takeLatest } from 'redux-saga/effects';\n\nimport {\n  addPostApi,\n  getPostsApi,\n} from '../../api/api';\n\nimport {\n  addPostAction,\n  addPostFailure,\n  getPostsAction,\n  getPostsFailure,\n  addPostRequest,\n  getPostDetails,\n  getPostDetailsFailure\n} from '../actions/postActions';\n\n\nexport function* getPostsSaga(): any{\n  try {\n    const response = yield call(getPostsApi);\n    const posts = response.data;\n    yield put(getPostsAction(posts));\n  } catch(e) {\n    yield put(getPostsFailure());\n  }\n}\n\nexport function* addPostSaga(action: ReturnType<typeof addPostRequest>) : any {\n  try {\n \n    yield call(addPostApi, action.payload);\n    yield put(addPostAction(action.payload));\n  } catch(e) {\n    yield put(addPostFailure(e));\n  }\n};\n\nexport function* getPostDetailSaga(action: any) : any {\n  try {\n     yield put(getPostDetails(action.id));\n  } catch(e) {\n    yield put(getPostDetailsFailure(e));\n  }\n};\n\n\nexport function* postsSaga() {\n  yield all([\n    takeEvery(\"posts/GET_POSTS_REQUEST\", getPostsSaga),\n    takeLatest(\"posts/ADD_POST_REQUEST\", addPostSaga),\n    takeEvery(\"posts/GET_POST_DETAILS_REQUEST\", getPostDetailSaga)\n  ]);\n}","import { call, put, takeLatest, all } from 'redux-saga/effects';\n\nimport { loginApi } from \"../../api/api\";\nimport { loginAction, loginErrorAction, loginRequest } from '../actions/userActions';\n\n\n\n\nexport function* loginUser({payload} : ReturnType<typeof loginRequest>) {\n    try {\n      const response = yield call(loginApi,payload);\n      const token = response.data.token;\n      localStorage.setItem('token', token);\n      yield put(loginAction(payload));\n    } catch(e) {\n      yield put(loginErrorAction(\"login error\"));\n    }\n  }\n\nexport function* loginSaga() {\n  yield takeLatest(\"user/LOGIN_REQUEST\", loginUser);\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { rootReducer } from \"./redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport thunk from \"redux-thunk\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport createSagaMiddleware from 'redux-saga';\nimport { postsSaga } from \"./redux/sagas/Posts\";\nimport { productSaga } from \"./redux/sagas/Products\";\nimport { loginSaga } from \"./redux/sagas/Auth\";\n// Saga Middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(postsSaga);\nsagaMiddleware.run(loginSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}